y=6, #response (ignored - pick any non-constant column)
data=blood_train.hex,
activation="Tanh",
classification=F,variable_importances=T,
hidden=c(10,10,10,10),
epochs=50,nfolds=25
)
dl.VI =blood_model@model$varimp
show(dl.VI)
prd.train.dl <- h2o.predict(blood_model, blood_train.hex)
prd.train.dl <- as.data.frame(prd.train.dl)
rmsle(prd.train.dl,train[,"count"])
prd.train.dl <- cbind(prd.train.dl,train[,"count"])
head(prd.train.dl,100)
prd.test.dl <- h2o.predict(blood_model, blood_test.hex)
#--------------------------------------------------------
#  Main Program for blood donation
#  Taposh Roy
#  @taposh_dr
#--------------------------------------------------------
setwd("/Users/taposh/workspace/drivendata")
source("mylibraries.R")
#input data
source("inputdata.R")
#View the data
head(train)
head(test)
head(sub)
#Factorengineering
donate2007<-c()
donate2007<-cbind("count"=donate2007,train[,"count"])
summary(donate2007)
head(donate2007)
train <- as.data.frame(train)
head(train)
# # The following two commands remove any previously installed H2O packages for R.
# if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
# if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# #
# # # Next, we download, install and initialize the H2O package for R.
#install.packages("h2o", repos=(c("http://s3.amazonaws.com/h2o-release/h2o/master/1497/R", getOption("repos"))))
library(h2o)
localH2O = h2o.init()
# Finally, let's run a demo to see H2O at work.
#demo(h2o.glm)
blood_train.hex = h2o.importFile(localH2O, path = "train.csv", key = "blood_train.hex")
blood_test.hex = h2o.importFile(localH2O, path = "test.csv", key = "blood_test.hex")
blood_model <- h2o.deeplearning(x=2:5,
y=6, #response (ignored - pick any non-constant column)
data=blood_train.hex,
activation="Tanh",
classification=F,variable_importances=T,
hidden=c(10,10,10,10,10),
epochs=80,nfolds=25
)
dl.VI =blood_model@model$varimp
show(dl.VI)
prd.train.dl <- h2o.predict(blood_model, blood_train.hex)
prd.train.dl <- as.data.frame(prd.train.dl)
rmsle(prd.train.dl,train[,"count"])
prd.train.dl <- cbind(prd.train.dl,train[,"count"])
head(prd.train.dl,100)
classification=F,variable_importances=T,
#--------------------------------------------------------
#  Main Program for blood donation
#  Taposh Roy
#  @taposh_dr
#--------------------------------------------------------
setwd("/Users/taposh/workspace/drivendata")
source("mylibraries.R")
#input data
source("inputdata.R")
#View the data
head(train)
head(test)
head(sub)
#Factorengineering
donate2007<-c()
donate2007<-cbind("count"=donate2007,train[,"count"])
summary(donate2007)
head(donate2007)
train <- as.data.frame(train)
head(train)
# # The following two commands remove any previously installed H2O packages for R.
# if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
# if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# #
# # # Next, we download, install and initialize the H2O package for R.
#install.packages("h2o", repos=(c("http://s3.amazonaws.com/h2o-release/h2o/master/1497/R", getOption("repos"))))
library(h2o)
localH2O = h2o.init()
# Finally, let's run a demo to see H2O at work.
#demo(h2o.glm)
blood_train.hex = h2o.importFile(localH2O, path = "train.csv", key = "blood_train.hex")
blood_test.hex = h2o.importFile(localH2O, path = "test.csv", key = "blood_test.hex")
blood_model <- h2o.deeplearning(x=2:5,
y=6, #response (ignored - pick any non-constant column)
data=blood_train.hex,
activation="Tanh",
classification=F,variable_importances=T,
hidden=c(10,10,10),
epochs=80,nfolds=25
)
dl.VI =blood_model@model$varimp
show(dl.VI)
prd.train.dl <- h2o.predict(blood_model, blood_train.hex)
prd.train.dl <- as.data.frame(prd.train.dl)
rmsle(prd.train.dl,train[,"count"])
prd.train.dl <- cbind(prd.train.dl,train[,"count"])
head(prd.train.dl,100)
#--------------------------------------------------------
#  Main Program for blood donation
#  Taposh Roy
#  @taposh_dr
#--------------------------------------------------------
setwd("/Users/taposh/workspace/drivendata")
source("mylibraries.R")
#input data
source("inputdata.R")
#View the data
head(train)
head(test)
head(sub)
#Factorengineering
donate2007<-c()
donate2007<-cbind("count"=donate2007,train[,"count"])
summary(donate2007)
head(donate2007)
train <- as.data.frame(train)
head(train)
# # The following two commands remove any previously installed H2O packages for R.
# if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
# if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# #
# # # Next, we download, install and initialize the H2O package for R.
#install.packages("h2o", repos=(c("http://s3.amazonaws.com/h2o-release/h2o/master/1497/R", getOption("repos"))))
library(h2o)
localH2O = h2o.init()
# Finally, let's run a demo to see H2O at work.
#demo(h2o.glm)
blood_train.hex = h2o.importFile(localH2O, path = "train.csv", key = "blood_train.hex")
blood_test.hex = h2o.importFile(localH2O, path = "test.csv", key = "blood_test.hex")
blood_model <- h2o.deeplearning(x=2:5,
y=6, #response (ignored - pick any non-constant column)
data=blood_train.hex,
activation="Tanh",
classification=F,variable_importances=T,
hidden=c(10,10,10),
epochs=35,nfolds=25
)
dl.VI =blood_model@model$varimp
show(dl.VI)
prd.train.dl <- h2o.predict(blood_model, blood_train.hex)
prd.train.dl <- as.data.frame(prd.train.dl)
rmsle(prd.train.dl,train[,"count"])
prd.train.dl <- cbind(prd.train.dl,train[,"count"])
head(prd.train.dl,100)
#--------------------------------------------------------
#  Main Program for blood donation
#  Taposh Roy
#  @taposh_dr
#--------------------------------------------------------
setwd("/Users/taposh/workspace/drivendata")
source("mylibraries.R")
#input data
source("inputdata.R")
#View the data
head(train)
head(test)
head(sub)
#Factorengineering
donate2007<-c()
donate2007<-cbind("count"=donate2007,train[,"count"])
summary(donate2007)
head(donate2007)
train <- as.data.frame(train)
head(train)
# # The following two commands remove any previously installed H2O packages for R.
# if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
# if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# #
# # # Next, we download, install and initialize the H2O package for R.
#install.packages("h2o", repos=(c("http://s3.amazonaws.com/h2o-release/h2o/master/1497/R", getOption("repos"))))
library(h2o)
localH2O = h2o.init()
# Finally, let's run a demo to see H2O at work.
#demo(h2o.glm)
blood_train.hex = h2o.importFile(localH2O, path = "train.csv", key = "blood_train.hex")
blood_test.hex = h2o.importFile(localH2O, path = "test.csv", key = "blood_test.hex")
blood_model <- h2o.deeplearning(x=2:5,
y=6, #response (ignored - pick any non-constant column)
data=blood_train.hex,
activation="Tanh",
classification=F,variable_importances=T,
hidden=c(10,10,10),
epochs=35,nfolds=20
)
dl.VI =blood_model@model$varimp
show(dl.VI)
prd.train.dl <- h2o.predict(blood_model, blood_train.hex)
prd.train.dl <- as.data.frame(prd.train.dl)
rmsle(prd.train.dl,train[,"count"])
prd.train.dl <- cbind(prd.train.dl,train[,"count"])
head(prd.train.dl,100)
#--------------------------------------------------------
#  Main Program for blood donation
#  Taposh Roy
#  @taposh_dr
#--------------------------------------------------------
setwd("/Users/taposh/workspace/drivendata")
source("mylibraries.R")
#input data
source("inputdata.R")
#View the data
head(train)
head(test)
head(sub)
#Factorengineering
donate2007<-c()
donate2007<-cbind("count"=donate2007,train[,"count"])
summary(donate2007)
head(donate2007)
train <- as.data.frame(train)
head(train)
# # The following two commands remove any previously installed H2O packages for R.
# if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
# if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# #
# # # Next, we download, install and initialize the H2O package for R.
#install.packages("h2o", repos=(c("http://s3.amazonaws.com/h2o-release/h2o/master/1497/R", getOption("repos"))))
library(h2o)
localH2O = h2o.init()
# Finally, let's run a demo to see H2O at work.
#demo(h2o.glm)
blood_train.hex = h2o.importFile(localH2O, path = "train.csv", key = "blood_train.hex")
blood_test.hex = h2o.importFile(localH2O, path = "test.csv", key = "blood_test.hex")
blood_model <- h2o.deeplearning(x=2:5,
y=6, #response (ignored - pick any non-constant column)
data=blood_train.hex,
activation="Tanh",
classification=F,variable_importances=T,
hidden=c(10,10,10),
epochs=35,nfolds=10
)
dl.VI =blood_model@model$varimp
show(dl.VI)
prd.train.dl <- h2o.predict(blood_model, blood_train.hex)
prd.train.dl <- as.data.frame(prd.train.dl)
rmsle(prd.train.dl,train[,"count"])
prd.train.dl <- cbind(prd.train.dl,train[,"count"])
head(prd.train.dl,100)
#--------------------------------------------------------
#  Main Program for blood donation
#  Taposh Roy
#  @taposh_dr
#--------------------------------------------------------
setwd("/Users/taposh/workspace/drivendata")
source("mylibraries.R")
#input data
source("inputdata.R")
#View the data
head(train)
head(test)
head(sub)
#Factorengineering
donate2007<-c()
donate2007<-cbind("count"=donate2007,train[,"count"])
summary(donate2007)
head(donate2007)
train <- as.data.frame(train)
head(train)
# # The following two commands remove any previously installed H2O packages for R.
# if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
# if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
# #
# # # Next, we download, install and initialize the H2O package for R.
#install.packages("h2o", repos=(c("http://s3.amazonaws.com/h2o-release/h2o/master/1497/R", getOption("repos"))))
library(h2o)
localH2O = h2o.init()
# Finally, let's run a demo to see H2O at work.
#demo(h2o.glm)
blood_train.hex = h2o.importFile(localH2O, path = "train.csv", key = "blood_train.hex")
blood_test.hex = h2o.importFile(localH2O, path = "test.csv", key = "blood_test.hex")
blood_model <- h2o.deeplearning(x=2:5,
y=6, #response (ignored - pick any non-constant column)
data=blood_train.hex,
activation="Tanh",
classification=F,variable_importances=T,
hidden=c(10),
epochs=35,nfolds=10
)
dl.VI =blood_model@model$varimp
show(dl.VI)
prd.train.dl <- h2o.predict(blood_model, blood_train.hex)
prd.train.dl <- as.data.frame(prd.train.dl)
rmsle(prd.train.dl,train[,"count"])
prd.train.dl <- cbind(prd.train.dl,train[,"count"])
head(prd.train.dl,100)
#Default Directory of Data
setwd("/Users/taposh/workspace/kaggle/bikeshare/")
#Loading Required Libraries
library(RWeka)#for PrincipalComponentAnalysis filter
library(wavelets)#for discret wavelet transforms
library(nnet)#training simple layer neural network
library(matrixStats)#calculate std of columns
library(pls)#multivariate regression
library(monmlp)#training multilayer perceptron
library(e1071)#training SVM
library(prospectr)#preprocessing
library(kernlab)# training gaussian process
suppressPackageStartupMessages({
library(RWeka)#for PrincipalComponentAnalysis filter
library(wavelets)#for discret wavelet transforms
library(nnet)#training simple layer neural network
library(matrixStats)#calculate std of columns
library(pls)#multivariate regression
library(monmlp)#training multilayer perceptron
library(e1071)#training SVM
library(prospectr)#preprocessing
library(kernlab)# training gaussian process
})
#Loading Required Libraries
suppressPackageStartupMessages({
library(RWeka)#for PrincipalComponentAnalysis filter
#library(wavelets)#for discret wavelet transforms
library(nnet)#training simple layer neural network
library(matrixStats)#calculate std of columns
library(pls)#multivariate regression
library(monmlp)#training multilayer perceptron
library(e1071)#training SVM
library(prospectr)#preprocessing
library(kernlab)# training gaussian process
})
suppressPackageStartupMessages({
library(RWeka)#for PrincipalComponentAnalysis filter
#library(wavelets)#for discret wavelet transforms
library(nnet)#training simple layer neural network
#library(matrixStats)#calculate std of columns
library(pls)#multivariate regression
library(monmlp)#training multilayer perceptron
library(e1071)#training SVM
library(prospectr)#preprocessing
library(kernlab)# training gaussian process
})
suppressPackageStartupMessages({
library(RWeka)#for PrincipalComponentAnalysis filter
#library(wavelets)#for discret wavelet transforms
library(nnet)#training simple layer neural network
#library(matrixStats)#calculate std of columns
library(pls)#multivariate regression
#library(monmlp)#training multilayer perceptron
library(e1071)#training SVM
library(prospectr)#preprocessing
library(kernlab)# training gaussian process
})
suppressPackageStartupMessages({
library(RWeka)#for PrincipalComponentAnalysis filter
#library(wavelets)#for discret wavelet transforms
library(nnet)#training simple layer neural network
#library(matrixStats)#calculate std of columns
library(pls)#multivariate regression
#library(monmlp)#training multilayer perceptron
library(e1071)#training SVM
#library(prospectr)#preprocessing
library(kernlab)# training gaussian process
})
#Default Directory of Data
setwd("/Users/taposh/workspace/kaggle/bikeshare/")
#Loading Required Libraries
suppressPackageStartupMessages({
library(RWeka)#for PrincipalComponentAnalysis filter
library(wavelets)#for discret wavelet transforms
library(nnet)#training simple layer neural network
library(matrixStats)#calculate std of columns
library(pls)#multivariate regression
library(monmlp)#training multilayer perceptron
library(e1071)#training SVM
library(prospectr)#preprocessing
library(kernlab)# training gaussian process
})
install.package(wavelets)
install.packages(wavelets)
install.packages('wavelets')
suppressPackageStartupMessages({
library(RWeka)#for PrincipalComponentAnalysis filter
library(wavelets)#for discret wavelet transforms
library(nnet)#training simple layer neural network
library(matrixStats)#calculate std of columns
library(pls)#multivariate regression
library(monmlp)#training multilayer perceptron
library(e1071)#training SVM
library(prospectr)#preprocessing
library(kernlab)# training gaussian process
})
install.packages('matrixStats')
install.packages('pls')
install.packages("pls")
install.packages("monmlp")
install.packages("prospectr")
install.packages("kernlab")
install.packages("kernlab")
#Default Directory of Data
setwd("/Users/taposh/workspace/kaggle/bikeshare/")
#Loading Required Libraries
suppressPackageStartupMessages({
library(RWeka)#for PrincipalComponentAnalysis filter
library(wavelets)#for discret wavelet transforms
library(nnet)#training simple layer neural network
library(matrixStats)#calculate std of columns
library(pls)#multivariate regression
library(monmlp)#training multilayer perceptron
library(e1071)#training SVM
library(prospectr)#preprocessing
library(kernlab)# training gaussian process
})
#Discrete Wavelet Transforms using Haar Algorithm
#DF1: input matrix for transform
#nTimes: number of iterations
HaarTransform=function(DF1,nTimes=1)
{
w =function(k)
{
s1=dwt(k, filter="haar")
return (s1@V[[1]])
}
Smt=DF1
for (i in 1:nTimes)
{
Smt=t(apply(Smt,1,w))
}
return (data.frame(Smt))
}
#Getting Derivatives
#DF1: input matrix for transform
#D: Order
Derivative=function(DF1,D=1)
{
df1=t(diff(t(DF1), differences = D))
return(df1)
}
#train MLP on train and then predict test using weights gained by train
#train: train data frame for training
#test: test data frame to predict
#Other parameters are passed into monmlp function
#Result is predicted values for test
GetMLPPreds=function(train,test,Labels,Iters=100,Hidden1=5,Hidden2=5,IWeights=0.5,N.ensemble=10,LTh = tansig, LTo = linear,LTh.prime = tansig.prime, LTo.prime = linear.prime,Seed=1)
{
gc()
set.seed(Seed)
m1=monmlp.fit(as.matrix(train),as.matrix(Labels),scale.y=T,n.trials = 1, hidden1=Hidden1, hidden2=Hidden2, n.ensemble=N.ensemble,Th = LTh, To = LTo,
Th.prime = LTh.prime, To.prime = LTo.prime,iter.max=Iters,monotone=NULL, bag=F, init.weights = c(-(IWeights),IWeights),max.exceptions = 10,silent = T)
pr1=monmlp.predict(as.matrix(test),weights=m1)
rm(m1)
gc()
return (data.frame(pr1))
}
#train simple layer neural network on train and then predict test using model gained by train
#train: train data frame for training
#test: test data frame to predict
#Other parameters are passed into nnet function
#Result is predicted values for test
GetNNETPreds=function(train,test,Labels,Size=10,Rang=0.5,Decay=0.1,Iters=100,MaxWts=1500)
{
set.seed(1)
g1=nnet((Labels)~.,data=train,size=Size,linout=T,skip =T, rang = Rang, decay = Decay,MaxNWts = MaxWts, maxit = Iters,trace=F)
pr1=predict(g1,test)
rm(g1)
gc()
return (data.frame(pr1))
}
#train SVM on train and then predict test using model gained by train
#train: train data frame for training
#test: test data frame to predict
#Other parameters are passed into SVM function in e1071 library
#Result is predicted values for test
GetSVMPreds=function(train,test,Labels,Cost=10000)
{
set.seed(1)
s1=svm(data.frame(train),Labels,scale = F,cost = Cost)
pr1=(predict(s1,data.frame(test)))
return (data.frame(pr1))
}
#train GaussianProcess on train and then predict test using model gained by train
#train: train data frame for training
#test: test data frame to predict
#Other parameters are passed into gausspr function in kernlab library
#Result is predicted values for test
GetGaussPreds=function(train,test,Labels,Kernel='rbfdot',Kpar='automatic',Tol=0.05,Var=0.01)
{
set.seed(1)
v1=gausspr(data.frame(train), (Labels),type= NULL, kernel=Kernel,
kpar=Kpar, var=Var, variance.model = T, tol=Tol, cross=0, fit=F)
pr1=(predict(v1,data.frame(test)))
rm(v1)
gc()
return (data.frame(pr1))
}
#train MVR on train and then predict test using model gained by train
#train: train data frame for training
#test: test data frame to predict
#Other parameters are passed into mvr function in pls library
#Result is predicted values for test
GetMVRPreds=function(train,test,Labels,Ncomp=120,Scale=True)
{
set.seed(1)
v1=mvr(Labels~.,data=data.frame(train),ncomp=Ncomp, method = pls.options()$pcralg,scale = T)
pr1=data.frame(predict(v1,data.frame(test)))
pr1=data.frame(rowMeans(pr1))
rm(v1)
gc()
return (data.frame(pr1))
}
