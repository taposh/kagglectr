{
    "contents" : "\n#--------------------------------------------------------\n#  Utils for kaggle-bike-sharing\n#  Taposh Roy\n#  @taposh_dr\n#--------------------------------------------------------\n\n#################\n# Finding Days\n##################\ndayof<-function(X){\n  month<-as.matrix(as.numeric(X[,\"month\"]))\n  month[month==1]<-13\n  month[month==2]<-14\n  day<-as.matrix(as.numeric(X[,\"day\"]))\n  year<-cbind(as.numeric(X[,\"year\"]),as.numeric(X[,\"month\"]))\n  for(i in 1:nrow(year)){\n    if((year[i,2]<=2)==TRUE){year[i,1]<-year[i,1]-1}\n  }\n  year<-as.matrix(year[,1])\n  y<-year %% 2000\n  c<-year - y\n  c<-c/100\n  DAY<-(day+floor(13*(month+1)/5)+y+floor(y/4)+floor(c/4)-c) %% 7\n  return(DAY)}\n\n#-----------------------------\n#submission tool\n#-----------------------------\n\nwrite.submission <- function(model,name, test_factors,test_dt){\n  \n  predict.model <- predict(model, test_factors)\n  submit <- data.frame(datetime = test_dt$datetime, count=predict.model)\n  #write results to .csv for submission\n  curtime <- Sys.time()\n  timestamp <-  strftime(curtime,\"%Y-%m-%d-%H-%M-%S\")\n  name <-paste(\"kaggle_bikeshare_\",name,timestamp,\".csv\", sep=\"_\")\n  \n  write.csv(submit, file=name,row.names=FALSE,quote=FALSE)\n}\n\n\n\n#submission tool\nwrite.submission.file <- function(model,name, test_factors){\n  test_dt<-read.csv(\"test.csv\")\n  test_dt<-(as.data.frame(test_dt))\n  \n  predict.model <- predict(model, test_factors)\n  submit <- data.frame(datetime = test_dt$datetime, count=predict.model)\n  #write results to .csv for submission\n  curtime <- Sys.time()\n  timestamp <-  strftime(curtime,\"%Y-%m-%d-%H-%M-%S\")\n  name <-paste(\"Submission_\",model,timestamp,\".csv\", sep=\"_\")\n  \n  write.csv(submit, file=name,row.names=FALSE,quote=FALSE)\n}\n\n#performance comparison\ntool.performance <- function(fit.model,subTest,subTrain,name.=name,compare.=compare,check.lgcount=FALSE,check.update=TRUE){\n  \n  if(check.lgcount){\n    predictT.model.testing <- predict(fit.model, newdat=subTest)\n    predictT.model.testing<- exp(predictT.model.testing)-1\n    predictT.model.Training <- predict(fit.model, newdat=subTrain)\n    predictT.model.Training<- exp(predictT.model.Training)-1\n    subTest$count <- as.numeric(exp(subTest$lgcount)-1)\n    subTrain$count <- as.numeric(exp(subTrain$lgcount)-1)\n    \n  } else{ \n    predictT.model.testing <- predict(fit.model, newdat=subTest)\n    if (any(predictT.model.testing<0)) {\n      predictT.model.testing[predictT.model.testing<0] <- 0\n    }\n    predictT.model.Training <- predict(fit.model, newdat=subTrain)\n    if (any(predictT.model.Training<0)) {\n      predictT.model.Training[predictT.model.Training<0] <- 0\n    }  \n  }\n  \n  rmsle.Test <- rmsle(subTest$count,predictT.model.testing)\n  rmse.Test <- rmse(subTest$count,predictT.model.testing)\n  rmsle.Train <- rmsle(subTrain$count,predictT.model.Training)\n  rmse.Train <- rmse(subTrain$count,predictT.model.Training)\n  \n  diff <- summary(as.numeric(subTrain$count - predictT.model.Training))\n  diff.Test <- summary(as.numeric(subTest$count - predictT.model.testing))\n  ll <- list('Test.rmsle'=rmsle.Test, 'Test.rmse'=rmse.Test, 'Train.RMSLE'=rmsle.Train, \n             'Train.RMSE'=rmse.Train,'Test.diff.median'=as.numeric(diff.Test[3]),'Test.diff.mean'=as.numeric(diff.Test[4]),\n             'Train.diff.median'=as.numeric(diff[3]),'Train.diff.mean'=as.numeric(diff[4]))\n  if (check.update) {\n    compare.<-rbind(compare., mmm=ll)\n    rname <- rownames(compare.)\n    rname[nrow(compare.)] <- name.  \n    rownames(compare.) <- rname \n  } else {\n    compare. <- as.data.frame(ll,row.names=name.)\n  }\n  compare.\n}\n\n\n##DEFINE Metric function\n\nmymetric <- function(data, lev=NULL, model=NULL){\n  require(Metrics)\n  pred<-data[,'pred']\n  obs<-data[,'obs']\n  isNA <- is.na(pred)\n  pred <- pred[!isNA]\n  obs <- obs[!isNA]\n  \n  if (length(obs) + length(pred) == 0) {\n    out <- rep(NA, 2)\n  }\n  else {\n    if (length(unique(pred)) < 2 || length(unique(obs)) < \n          2) {\n      resamplCor <- NA\n    }\n    else {\n      resamplCor <- try(cor(pred, obs, use = \"pairwise.complete.obs\"), \n                        silent = TRUE)\n      if (class(resamplCor) == \"try-error\") \n        resamplCor <- NA\n    }\n    \n    #      msle<-msle(obs, pred)\n    rmsle<-rmsle(obs,pred)\n    #      rmse<-rmse(obs,pred)\n    out <- rmsle\n  }\n  names(out) <- \"RMSLE\"\n  \n  if (any(is.nan(out))) \n    out[is.nan(out)] <- NA\n  out\n  \n}\n\nmy2metric <- function(data, lev=NULL, model=NULL){\n  pred<-data[,'pred']\n  obs<-data[,'obs']\n  rmse <- rmse(pred,obs)\n  isNA <- is.na(pred)\n  pred[isNA] <- 0\n  obs[isNA] <- 0\n  pred[which(pred < 0)] <- 0.0\n  obs[which(pred < 0)] <- 0.0 \n  rmsle <- rmsle(obs,pred)\n  out <- c(rmsle,rmse)\n  names(out) <- c(\"RMSLE\",\"RMSE\")\n  \n  if (any(is.nan(out))) \n    out[is.nan(out)] <- 0.0\n  out\n  \n}\n\n",
    "created" : 1422057723396.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "45|60|57|0|\n",
    "hash" : "21387503",
    "id" : "8F6F68B5",
    "lastKnownWriteTime" : 1422119159,
    "path" : "~/workspace/kaggle/bikeshare/utils.R",
    "project_path" : "utils.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}