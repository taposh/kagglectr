{
    "contents" : "\n#--------------------------------------------------------\n#  Grid based models for kaggle-bike-sharing\n#  Taposh Roy\n#  @taposh_dr\n# http://topepo.github.io/caret/training.html\n# http://topepo.github.io/caret/modelList.html\n#--------------------------------------------------------\n\n#For counts\ntrain_factor <- cbind(countresult,bike)\ncolnames(train_factor)[1] <- \"count\"\ncolnames(train_factor)\ntrain_factor <- as.data.frame(train_factor)\n\n#For causal\ntrain_factor_causal <- cbind(causal,bike)\ncolnames(train_factor_causal)[1] <- \"causal\"\ncolnames(train_factor_causal)\n\n#For registered\ntrain_factor_registered <- cbind(registered,bike)\ncolnames(train_factor_registered)[1] <- \"registered\"\ncolnames(train_factor_registered)\n\n#Columns Created\ncolnames(bike)\ncolnames(test)\n\n# Split back into test and train sets\nsubTrain <- train_factor[1:8709,]\nsubTest <- train_factor[8710:10886,]\n\nhead(subTrain)\nhead(subTest)\n\n#-------------------------------------\n#  Model 2: GBM\n#-------------------------------------\n## gbm fitting\n\nset.seed(123)\nfitControl <- trainControl(method = 'cv', number = 10, summaryFunction=my2metric)\nGrid <- expand.grid( n.trees = seq(100,3000,100), interaction.depth = c(30), shrinkage = c(0.075))\nformula <- count ~.\n#fit.gbm<-gbm(count ~., data=as.data.frame(train_factor),verbose=FALSE,distribution='poisson')\n\nfit.gbm <- train(formula, data=as.data.frame(subTrain), method = 'gbm', trControl=fitControl, verbose=FALSE,tuneGrid=Grid,metric='RMSLE',maximize=FALSE,distribution='poisson')\n\n#show(fit.gbm)\nplot(fit.gbm)\ngbmVarImp<-varImp(fit.gbm)  \nplot(gbmVarImp)\n\nwrite.submission(fit.gbm, 'submission_gbm_v3.csv',test,test_dt)\nsave(fit.gbm,file='fit_gbm.RData')\n\n#-------------------------------------\n#  Model 2: GBM\n#-------------------------------------\n\nset.seed(123)\nfitControl <- trainControl(method = 'cv', number = 10, summaryFunction=my2metric)\nGrid <- expand.grid( n.trees = seq(100,3000,100), interaction.depth = c(30), shrinkage = c(0.075))\n\nformula <- count ~ .\nfit.gbm.f <- train(formula, data=subTrain, method = 'gbm', trControl=fitControl, verbose=FALSE,tuneGrid=Grid,metric='RMSLE',maximize=FALSE,distribution='poisson')\n#show(fit.gbm.f)\nplot(fit.gbm.f)\ngbmFVarImp<-varImp(fit.gbm.f)  \nplot(gbmFVarImp)\nwrite.submission(fit.gbm.f, 'submission_gbm_v4.csv',test,test_dt)\nsave(fit.gbm.f,file='fit_gbmf.RData')\n\n#enet in caret/elasticnet \n#when lambda = 0 -> lasso\nset.seed(123)\nfitControl <- trainControl(method = 'cv', number = 10, summaryFunction=my2metric)\nGrid <- expand.grid( fraction = seq(0.05,1.0,0.05),lambda=seq(0,1.0,0.2))\nformula <- count ~ .\nfit.enet <- train(formula, data=subTrain, method = 'enet', trControl=fitControl,tuneGrid=Grid,metric='RMSLE', maximize=FALSE)\n#show(fit.enet)\nplot(fit.enet)\n\nenetVarImp<-varImp(fit.enet)  \nplot(enetVarImp)\nsave(fit.enet,file='fit_enet.RData')\n\n#-------------------------------------\n#  Model 2: PCR\n#-------------------------------------\n#pcr in caret/pls \nset.seed(123)\nfitControl <- trainControl(method = 'cv', number = 10, summaryFunction=my2metric)\nGrid <- expand.grid(ncomp = seq(3,10))\nformula <- count ~ .\nfit.pcr <- train(formula, data=subTrain, method = 'pcr', trControl=fitControl,metric='RMSLE', maximize=FALSE,tuneGrid=Grid)\n#show(fit.pcr)\nplot(fit.pcr)\npcrVarImp<-varImp(fit.pcr)  \nplot(pcrVarImp)\nsave(fit.pcr,file='fit_pcr.RData')\n\n#-------------------------------------\n#  Model 2: GLMNET\n#-------------------------------------\n\n#glmnet in caret/glmnet \nset.seed(123)\nfitControl <- trainControl(method = 'cv', number = 10, summaryFunction=my2metric)\nGrid <- expand.grid(lambda = seq(0.1,50.0,0.5),alpha=c(1))\nformula <- count ~ .\nfit.glmnet <- train(formula, data=subTrain, method = 'glmnet', trControl=fitControl,metric='RMSLE', maximize=FALSE,tuneGrid=Grid)\n#show(fit.glmnet)\nplot(fit.glmnet)\nglmnetVarImp<-varImp(fit.glmnet)  \nplot(glmnetVarImp)\nsave(fit.glmnet,file='fit_glmnet.RData')\n\n\n#-------------------------------------\n#  Model 2: GLMNET\n#-------------------------------------\n\nset.seed(123)\nfitControl <- trainControl(method = 'cv', number = 10, summaryFunction=my2metric)\nGrid <- expand.grid(lambda = seq(0.1,50.0,0.5),alpha=c(1))\nformula <- count ~ .\nfit.glmnet.2OrderInt <- train(formula, data=subTrain, method = 'glmnet', trControl=fitControl,metric='RMSLE', maximize=FALSE,tuneGrid=Grid)\nplot(fit.glmnet.2OrderInt)\nglmnet2VarImp<-varImp(fit.glmnet.2OrderInt)  \nplot(glmnet2VarImp)\nsave(fit.glmnet.2OrderInt,file='fit_glmnet2.RData')\n\n#-------------------------------------\n#  Model : Random Forest\n#-------------------------------------\n\n#qrf in caret/quantregForest \nset.seed(123)\nfitControl <- trainControl(method = 'cv', number=10, summaryFunction=my2metric)\nGrid <- expand.grid(mtry = c(5,7,10))\nformula <- count ~ .\nfit.qrf <- train(formula, data=subTrain, method = 'qrf', trControl=fitControl,metric='RMSLE', maximize=FALSE,tuneGrid=Grid)\n#show(fit.qrf)\nplot(fit.qrf)\nqrfVarImp<-varImp(fit.qrf)  \nplot(qrfVarImp)\nwrite.submission(fit.qrf, 'submission_qrf_v2.csv',test,test_dt)\n\n\n#-------------------------------------\n#  Model : Random Forest\n#-------------------------------------\n# set.seed(123)\n# fitControl <- trainControl(method = 'cv', number=6, summaryFunction=my2metric)\n# Grid <- expand.grid(mtry = c(7,10,15))\n# formula <- count ~ .\n# fit.qrf.f <- train(formula, data=subTrain2, method = 'qrf', trControl=fitControl,metric='RMSLE', maximize=FALSE,tuneGrid=Grid)\n# #show(fit.qrf)\n# plot(fit.qrf.f)\n# qrffVarImp<-varImp(fit.qrf.f)  \n# plot(qrffVarImp)\n# write.submission(fit.qrf.f, 'submission_qrff_v3.csv',test,test_dt)\n# save(fit.qrf,fit.qrf.f,file='fit_qrf.RData')\n\n#-------------------------------------\n#  Model : Random Forest\n#-------------------------------------\n#rf in caret/randomForest \nset.seed(123)\nfitControl <- trainControl(method = 'oob')\nGrid <- expand.grid(mtry = c(15,20,25,30))\nformula <- count ~ .\nfit.rf <- train(formula, data=subTrain, method = 'rf', trControl=fitControl,metric='RMSE', maximize=FALSE,tuneGrid=Grid)\n#show(fit.rf)\nplot(fit.rf$results$mtry,fit.rf$results$RMSE)\nwrite.submission(fit.rf, 'submission_rf_v3.csv',test,test_dt)\nsave(fit.rf,file='fit_rf.RData')\n\n#-------------------------------------\n#  Model : Random Forest\n#-------------------------------------\n#rf in caret/randomForest \nset.seed(123)\nfitControl <- trainControl(method = 'oob',summaryFunction=my2metric)\nGrid <- expand.grid(mtry = c(15,30,45))\nformula <- count ~ .\nfit.cforest <- train(formula, data=subTrain2, method = 'cforest', trControl=fitControl,metric='RMSLE', maximize=FALSE,tuneGrid=Grid)\n#show(fit.cforest)\nplot(fit.cforest$results$mtry,fit.cforest$results$RMSE)\nwrite.submission(fit.cforest, 'submission_cforest_v3.csv',test,test_dt)\nsave(fit.cforest,file='fit_cforest.RData')\n\n#######################\n## SVM Family\n#######################\n\nset.seed(123)\nGrid <- expand.grid(sigma = c(0.05,0.1,0.2))\nfitControl <- trainControl(method = 'cv', number = 10, summaryFunction=my2metric)\nformula <- count ~ .\nfit.rvmRadial <- train(formula, data=subTrain, method = 'rvmRadial', trControl=fitControl,metric='RMSLE', maximize=FALSE,tuneGrid=Grid)\n#show(fit.rvmRadial)\nplot(fit.rvmRadial)\nrvmRadialVarImp<-varImp(fit.rvmRadial)  \nplot(rvmRadialVarImp)\nsave(fit.rvmRadial,file='fit_rvmRadial.RData')\n\n\n######################\n## Neural Net\n######################\n\nset.seed(123)\nGrid <- expand.grid(size=seq(3,20,5),decay=c(0.01,0.1,0.2,0.3))\nfitControl <- trainControl(method = 'cv', number = 10, summaryFunction=my2metric)\nformula <- count ~ .\nfit.pcaNNet <- train(formula, data=subTrain, method = 'pcaNNet', trControl=fitControl,metric='RMSLE', maximize=FALSE,tuneGrid=Grid,linout=TRUE,maxit=5000,trace=FALSE)\n#show(fit.rvmRadial)\nplot(fit.pcaNNet)\npcaNNetVarImp<-varImp(fit.pcaNNet)  \nplot(pcaNNetVarImp)\n\n#-------------------------------------\n#  Model : Neural Nets\n#-------------------------------------\n\nset.seed(123)\nGrid <- expand.grid(size=seq(3,20,5),decay=c(0.01,0.1,0.2,0.3))\nfitControl <- trainControl(method = 'cv', number = 10, summaryFunction=my2metric)\nformula <- count ~ .\nfit.nnet <- train(formula, data=subTrain, method = 'nnet', trControl=fitControl,metric='RMSLE', maximize=FALSE,tuneGrid=Grid,linout=TRUE,maxit=5000,trace=FALSE)\n#show(fit.rvmRadial)\nplot(fit.nnet)\nnnetVarImp<-varImp(fit.nnet)  \nplot(nnetVarImp)\nsave(fit.nnet,fit.pcaNNet,file='fit_nnet.RData')\n\n#-------------------------------------\n#  Model : Neural Nets\n#-------------------------------------\nset.seed(123)\nGrid <- expand.grid(layer1=c(2,6),layer2=c(2,6),layer3=c(2,6))\nfitControl <- trainControl(method = 'cv', number=10, summaryFunction=my2metric)\nformula <- count ~ .\nfit.neuralnet <- train(formula, data=subTrain, method = 'neuralnet', trControl=fitControl,metric='RMSLE', maximize=FALSE,tuneGrid=Grid,linear.output=TRUE)\n#show(fit.rvmRadial)\nneuralnetVarImp<-varImp(fit.neuralnet)  \nplot(neuralnetVarImp)\nsave(fit.neuralnet,file='fit_neuralnet.RData')\n\n#################################################\n\n\n\n\n\n",
    "created" : 1422060246717.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "767695420",
    "id" : "D9CAF9F",
    "lastKnownWriteTime" : 1422315656,
    "path" : "~/workspace/kaggle/bikeshare/models.R",
    "project_path" : "models.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}